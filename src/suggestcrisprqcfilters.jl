"""
    suggestcrisprqcfilters(
        sums::Vector{Float64}, 
        maxproportion::Vector{Float64};
        block = nothing, 
        nummads = 3)

Suggest suitable filtering thresholds for the CRISPR-derived QC metrics.
This is based on the assumption that most cells are of high quality, such that outliers for the QC metrics (detected with a MAD-based algorithm) are potentially problematic and should be removed.
The function accepts the following arguments, typically generated by `percellcrisprqcmetrics`:

- `sums`: a vector containing the total tag count for each cell.
- `maxproportion`: a vector containing the proportion of counts assigned to the most abundant guide in each cell.

All vectors should have length equal to the number of cells.
This function then returns a dictionary containing the following keys:

- `thresholds`: a dictionary containing:
  - `maxcount`: the filtering threshold applied to the maximum count (i.e., the product of `sums` and `maxproportions`).
- `filter`: a vector of booleans where a truthy value indicates that the corresponding cell failed to pass at least one of the thresholds.
  Such cells are deemed to be of low-quality and should be discarded.

`block` should be a vector of length equal to the number of columns of `x`.
This should specify the block assignment for each cell.
Filtering thresholds are computed within each block, which avoids inflated MADs when there are large block-to-block differences.
If `block` is provided, all thresholds are instead dictionaries where each key is the block name and each value is the filtering threshold in that block.
If not provided, all cells are assumed to belong to the same block.

The number of MADs used to define the outlier thresholds is defined by `nummads`.
Larger values yield more relaxed filters.

# Examples
```jldoctest

julia> using SparseArrays

julia> x = abs.(sprand(Int32, 50, 10, 0.2))

julia> using scran

julia> mat = scran.initializesparsematrix(x)

julia> metrics = scran.percellcrisprqcmetrics(mat)

julia> scran.suggestcrisprqcfilters(metrics["sums"], metrics["maxproportion"])
```
"""
function suggestcrisprqcfilters(sums::Vector{Float64}, maxproportion::Vector{Float64}; block = nothing, nummads = 3)
    ncells = length(sums)
    if length(maxproportion) != ncells
        throw(ErrorException("'maxproportion' should be of the same length as 'sums'"))
    end

    use_block, block_ids, block_levels = transform_factor(block, ncells, "length of 'block' vector should be equal to length of 'sums'")

    survivors = Vector{UInt8}(undef, ncells)
    thresholds = suggest_crispr_qc_filters(sums, maxproportion, use_block, block_ids, survivors, nummads)

    output = Dict{String, Any}(
        "thresholds" => Dict{String, Any}(
            "maxcount" => transform_blocked_thresholds(thresholds_max_count(thresholds), use_block, block_levels)
        ),
        "filter" => Vector{Bool}(survivors)
    )

    return output
end
